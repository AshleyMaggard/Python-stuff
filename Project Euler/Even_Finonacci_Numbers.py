# Problem 2
#Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

import sys
import math
import time

start_time = time.clock()
print("=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=")
print("=                                                                                   =")
print("= This is problem #2 from Project Euler. It will print a list all the even          =")
print("= Fibonacci numbers below 4 million. It will then output the sum of that list.      =")
print("=                                                                                   =")
print("=                                                            Code by Ashley Maggard =")
print("=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=")
print()

# range(0,4000000,2) #even numbers between 0 and 4 million
listAll = []
listEven = []

def fibonacciSequence():
    n = 1
    m = 2
    listAll.append(n)
    listAll.append(m)
    k = n + m
    while k <= 4000000:
        listAll.append(k)
        #print(listAll)
        n = m
        m = k
        k = n + m

fibonacciSequence()

for x in listAll:
    if x % 2 == 0:
        listEven.append(x)

sumAll = sum(list(listEven))
print("All the Fibonacci numbers less than 4 million:")
print(listAll)
print()
print("All the EVEN Fibonacci numbers less than 4 million:")
print(listEven)
print()
print("The sum of all even Fibonacci numbers less than 4 million is",sumAll)
print()
print()
print("Calculation took", round(time.clock() - start_time,5), "seconds")
